diff --git a/content/public/renderer/content_renderer_client.h b/content/public/renderer/content_renderer_client.h
index 0764782..b3cd794 100644
--- a/content/public/renderer/content_renderer_client.h
+++ b/content/public/renderer/content_renderer_client.h
@@ -346,6 +346,11 @@ class CONTENT_EXPORT ContentRendererClient {
   virtual void DidInitializeWorkerContextOnWorkerThread(
       v8::Local<v8::Context> context) {}
 
+  // Notifies that a worker context will be destroyed. This function is called
+  // from the worker thread.
+  virtual void WillDestroyWorkerContextOnWorkerThread(
+      v8::Local<v8::Context> context) {}
+
   // Allows the client to expose interfaces from the renderer process to the
   // browser process via |registry|.
   virtual void ExposeInterfacesToBrowser(
diff --git a/content/renderer/renderer_blink_platform_impl.cc b/content/renderer/renderer_blink_platform_impl.cc
index f30b509..6cfd9df 100644
--- a/content/renderer/renderer_blink_platform_impl.cc
+++ b/content/renderer/renderer_blink_platform_impl.cc
@@ -1257,6 +1257,12 @@ RendererBlinkPlatformImpl::trialTokenValidator() {
   return &trial_token_validator_;
 }
 
+void RendererBlinkPlatformImpl::workerContextWillDestroy(
+    const v8::Local<v8::Context>& worker) {
+  GetContentClient()->renderer()->WillDestroyWorkerContextOnWorkerThread(
+      worker);
+}
+
 void RendererBlinkPlatformImpl::workerContextCreated(
     const v8::Local<v8::Context>& worker) {
   GetContentClient()->renderer()->DidInitializeWorkerContextOnWorkerThread(
diff --git a/content/renderer/renderer_blink_platform_impl.h b/content/renderer/renderer_blink_platform_impl.h
index df62a99..75a3588 100644
--- a/content/renderer/renderer_blink_platform_impl.h
+++ b/content/renderer/renderer_blink_platform_impl.h
@@ -197,6 +197,7 @@ class CONTENT_EXPORT RendererBlinkPlatformImpl : public BlinkPlatformImpl {
 
   blink::WebTrialTokenValidator* trialTokenValidator() override;
   void workerContextCreated(const v8::Local<v8::Context>& worker) override;
+  void workerContextWillDestroy(const v8::Local<v8::Context>& worker) override;
 
   // Set the PlatformEventObserverBase in |platform_event_observers_| associated
   // with |type| to |observer|. If there was already an observer associated to
diff --git a/third_party/WebKit/Source/core/workers/WorkerThread.cpp b/third_party/WebKit/Source/core/workers/WorkerThread.cpp
index e76c01f..560566a 100644
--- a/third_party/WebKit/Source/core/workers/WorkerThread.cpp
+++ b/third_party/WebKit/Source/core/workers/WorkerThread.cpp
@@ -512,6 +512,12 @@ void WorkerThread::prepareForShutdownOnWorkerThread() {
       setExitCode(lock, ExitCode::GracefullyTerminated);
   }
 
+  {
+    v8::HandleScope handleScope(isolate());
+    Platform::current()->workerContextWillDestroy(
+        globalScope()->scriptController()->context());
+  }
+
   m_inspectorTaskRunner->kill();
   workerReportingProxy().willDestroyWorkerGlobalScope();
   probe::allAsyncTasksCanceled(globalScope());
diff --git a/third_party/WebKit/public/platform/Platform.h b/third_party/WebKit/public/platform/Platform.h
index 2cd7334..8c078e7 100644
--- a/third_party/WebKit/public/platform/Platform.h
+++ b/third_party/WebKit/public/platform/Platform.h
@@ -587,6 +587,7 @@ class BLINK_PLATFORM_EXPORT Platform {
   virtual void didStartWorkerThread() {}
   virtual void willStopWorkerThread() {}
   virtual void workerContextCreated(const v8::Local<v8::Context>& worker) {}
+  virtual void workerContextWillDestroy(const v8::Local<v8::Context>& worker) {}
   virtual bool allowScriptExtensionForServiceWorker(const WebURL& scriptUrl) {
     return false;
   }
