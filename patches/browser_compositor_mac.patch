diff --git a/content/browser/renderer_host/browser_compositor_view_mac.h b/content/browser/renderer_host/browser_compositor_view_mac.h
index d0ecb71..248ba9a 100644
--- a/content/browser/renderer_host/browser_compositor_view_mac.h
+++ b/content/browser/renderer_host/browser_compositor_view_mac.h
@@ -10,6 +10,7 @@
 #include "base/macros.h"
 #include "cc/scheduler/begin_frame_source.h"
 #include "content/browser/renderer_host/delegated_frame_host.h"
+#include "content/common/content_export.h"
 #include "ui/compositor/compositor.h"
 #include "ui/compositor/compositor_observer.h"
 
@@ -43,8 +44,8 @@ class BrowserCompositorMacClient {
 //   is visible.
 // - The RenderWidgetHostViewMac that is used to display these frames is
 //   attached to the NSView hierarchy of an NSWindow.
-class BrowserCompositorMac : public cc::BeginFrameObserver,
-                             public DelegatedFrameHostClient {
+class CONTENT_EXPORT BrowserCompositorMac : public cc::BeginFrameObserver,
+                                            public DelegatedFrameHostClient {
  public:
   BrowserCompositorMac(
       ui::AcceleratedWidgetMacNSView* accelerated_widget_mac_ns_view,
@@ -56,9 +57,11 @@ class BrowserCompositorMac : public cc::BeginFrameObserver,
 
   // These will not return nullptr until Destroy is called.
   DelegatedFrameHost* GetDelegatedFrameHost();
+  ui::Layer* GetRootLayer() { return root_layer_.get(); }
 
   // This may return nullptr, if this has detached itself from its
   // ui::Compositor.
+  ui::Compositor* GetCompositor();
   ui::AcceleratedWidgetMac* GetAcceleratedWidgetMac();
 
   void SwapCompositorFrame(uint32_t compositor_frame_sink_id,
diff --git a/content/browser/renderer_host/browser_compositor_view_mac.mm b/content/browser/renderer_host/browser_compositor_view_mac.mm
index e4c25e73..e2f789e 100644
--- a/content/browser/renderer_host/browser_compositor_view_mac.mm
+++ b/content/browser/renderer_host/browser_compositor_view_mac.mm
@@ -201,6 +201,12 @@ void OnCompositingShuttingDown(ui::Compositor* compositor) override {}
     g_spare_recyclable_compositors.Get().clear();
 }
 
+ui::Compositor* BrowserCompositorMac::GetCompositor() {
+  if (recyclable_compositor_)
+    return recyclable_compositor_->compositor();
+  return nullptr;
+}
+
 ui::AcceleratedWidgetMac* BrowserCompositorMac::GetAcceleratedWidgetMac() {
   if (recyclable_compositor_)
     return recyclable_compositor_->accelerated_widget_mac();
@@ -417,8 +423,13 @@ void OnCompositingShuttingDown(ui::Compositor* compositor) override {}
 }
 
 gfx::Size BrowserCompositorMac::DelegatedFrameHostDesiredSizeInDIP() const {
-  NSRect bounds = [client_->BrowserCompositorMacGetNSView() bounds];
-  return gfx::Size(bounds.size.width, bounds.size.height);
+  // View will be nil with CEF OSR.
+  NSView* view = client_->BrowserCompositorMacGetNSView();
+  if (view) {
+    NSRect bounds = [view bounds];
+    return gfx::Size(bounds.size.width, bounds.size.height);
+  }
+  return root_layer_->bounds().size();
 }
 
 bool BrowserCompositorMac::DelegatedFrameCanCreateResizeLock() const {
